{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/apple/Documents/react kurs/madness/pages/test/slider.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect, useCallback, useRef } from \"react\";\nimport Swiper from \"react-id-swiper\";\nimport SlideItem from \"./slideItem\";\nexport const SlideContainer = props => /*#__PURE__*/_jsxDEV(Flex, _objectSpread(_objectSpread({}, props), {}, {\n  __css: {\n    position: \"relative\",\n    \".swiper-container\": {\n      width: \"100%\",\n      height: \"20rem\"\n    }\n  }\n}), void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 7,\n  columnNumber: 3\n}, this);\nexport default (({\n  items\n}) => {\n  // Swiper instance\n  const swiperRef = useRef(null); // Slides current index\n\n  const {\n    0: currentIndex,\n    1: updateCurrentIndex\n  } = useState(0); // Params definition\n\n  const params = {\n    initialSlide: 3,\n    pagination: {\n      el: \".swiper-pagination\",\n      type: \"bullets\",\n      clickable: true\n    },\n    navigation: {\n      nextEl: \".swiper-button-next\",\n      prevEl: \".swiper-button-prev\"\n    },\n    spaceBetween: 30,\n    loop: true,\n    autoplay: true\n  }; // Manipulate swiper from outside\n\n  const goNext = () => {\n    if (swiperRef.current && swiperRef.current.swiper) {\n      swiperRef.current.swiper.slideNext();\n    }\n  };\n\n  const goPrev = () => {\n    if (swiperRef.current && swiperRef.current.swiper) {\n      swiperRef.current.swiper.slidePrev();\n    }\n  };\n\n  const renderItem = useCallback(({\n    idx,\n    color,\n    content\n  }) => /*#__PURE__*/_jsxDEV(SlideItem, {\n    color: color,\n    content: content\n  }, `slide_${idx}`, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 7\n  }, this), []);\n  const updateIndex = useCallback(() => updateCurrentIndex(swiperRef.current.swiper.realIndex), []); // Add eventlisteners for swiper after initializing\n\n  useEffect(() => {\n    const swiperInstance = swiperRef.current.swiper;\n\n    if (swiperInstance) {\n      swiperInstance.on(\"slideChange\", updateIndex);\n    }\n\n    return () => {\n      if (swiperInstance) {\n        swiperInstance.off(\"slideChange\", updateIndex);\n      }\n    };\n  }, [updateIndex]);\n  return /*#__PURE__*/_jsxDEV(Flex, {\n    flexDirection: \"column\",\n    children: [/*#__PURE__*/_jsxDEV(SlideContainer, {\n      children: /*#__PURE__*/_jsxDEV(Swiper, _objectSpread(_objectSpread({}, params), {}, {\n        ref: swiperRef,\n        children: items.map(renderItem)\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Flex, {\n      my: 5,\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        onClick: goPrev,\n        mr: 4,\n        bg: \"green.2\",\n        color: \"white\",\n        border: 0,\n        children: \"Prev\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: goNext,\n        bg: \"red.4\",\n        border: 0,\n        color: \"white\",\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Text, {\n      textAlign: \"center\",\n      width: 1,\n      fontSize: 4,\n      children: [\"Current slide index is\", \" \", /*#__PURE__*/_jsxDEV(Text, {\n        as: \"strong\",\n        fontWeight: 3,\n        color: \"green.4\",\n        fontSize: 4,\n        children: currentIndex\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n});","map":{"version":3,"sources":["/Users/apple/Documents/react kurs/madness/pages/test/slider.js"],"names":["React","useState","useEffect","useCallback","useRef","Swiper","SlideItem","SlideContainer","props","position","width","height","items","swiperRef","currentIndex","updateCurrentIndex","params","initialSlide","pagination","el","type","clickable","navigation","nextEl","prevEl","spaceBetween","loop","autoplay","goNext","current","swiper","slideNext","goPrev","slidePrev","renderItem","idx","color","content","updateIndex","realIndex","swiperInstance","on","off","map"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from \"react\";\n\nimport Swiper from \"react-id-swiper\";\nimport SlideItem from \"./slideItem\";\n\nexport const SlideContainer = (props) => (\n  <Flex\n    {...props}\n    __css={{\n      position: \"relative\",\n      \".swiper-container\": {\n        width: \"100%\",\n        height: \"20rem\",\n      },\n    }}\n  />\n);\n\nexport default ({ items }) => {\n  // Swiper instance\n  const swiperRef = useRef(null);\n\n  // Slides current index\n  const [currentIndex, updateCurrentIndex] = useState(0);\n  // Params definition\n  const params = {\n    initialSlide: 3,\n    pagination: {\n      el: \".swiper-pagination\",\n      type: \"bullets\",\n      clickable: true,\n    },\n    navigation: {\n      nextEl: \".swiper-button-next\",\n      prevEl: \".swiper-button-prev\",\n    },\n    spaceBetween: 30,\n    loop: true,\n    autoplay: true,\n  };\n\n  // Manipulate swiper from outside\n  const goNext = () => {\n    if (swiperRef.current && swiperRef.current.swiper) {\n      swiperRef.current.swiper.slideNext();\n    }\n  };\n\n  const goPrev = () => {\n    if (swiperRef.current && swiperRef.current.swiper) {\n      swiperRef.current.swiper.slidePrev();\n    }\n  };\n\n  const renderItem = useCallback(\n    ({ idx, color, content }) => (\n      <SlideItem color={color} content={content} key={`slide_${idx}`} />\n    ),\n    []\n  );\n\n  const updateIndex = useCallback(\n    () => updateCurrentIndex(swiperRef.current.swiper.realIndex),\n    []\n  );\n\n  // Add eventlisteners for swiper after initializing\n  useEffect(() => {\n    const swiperInstance = swiperRef.current.swiper;\n\n    if (swiperInstance) {\n      swiperInstance.on(\"slideChange\", updateIndex);\n    }\n\n    return () => {\n      if (swiperInstance) {\n        swiperInstance.off(\"slideChange\", updateIndex);\n      }\n    };\n  }, [updateIndex]);\n\n  return (\n    <Flex flexDirection=\"column\">\n      <SlideContainer>\n        <Swiper {...params} ref={swiperRef}>\n          {items.map(renderItem)}\n        </Swiper>\n      </SlideContainer>\n      <Flex my={5} justifyContent=\"center\" alignItems=\"center\">\n        <Button onClick={goPrev} mr={4} bg=\"green.2\" color=\"white\" border={0}>\n          Prev\n        </Button>\n        <Button onClick={goNext} bg=\"red.4\" border={0} color=\"white\">\n          Next\n        </Button>\n      </Flex>\n      <Text textAlign=\"center\" width={1} fontSize={4}>\n        Current slide index is{\" \"}\n        <Text as=\"strong\" fontWeight={3} color=\"green.4\" fontSize={4}>\n          {currentIndex}\n        </Text>\n      </Text>\n    </Flex>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}